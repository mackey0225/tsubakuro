syntax = "proto3";

package protocol;

option java_package = "com.nautilus_technologies.tsubakuro.connectivity";
option java_outer_classname = "Protos";

/*
 * Common.
 */

/* For session handle. */
message Session {
  uint64 handle = 1;
}

/* For transaction handle. */
message Transaction {
  uint64 handle = 1;
}

/* For prepared statement handle. */
message PreparedStatement {
  uint64 handle = 1;
}

/* For data types that the 'tsurugi' supports. */
enum DataType {
  NULL = 0;  /* The first enum value must be zero in proto3. */
  INT4 = 1;
  INT8 = 2;
  FLOAT4 = 3;
  FLOAT8 = 4;
  STRING = 5;
}


/*
 * Definition of sub fields for Request.
 */

/* For host variable consisting of name and type. */
message PlaceHolder {
  message Variable {
    string name = 1;
    DataType type = 2;
  }

  repeated Variable Variables = 1;
}

/* For set of parameters passed when executing prepared statements. */
message ParameterSet {
  message Parameter {
    string name = 1;
    oneof value {
      int32 i_value = 2;
      int64 l_value = 3;
      float f_value = 4;
      double d_value = 5;
      string s_value = 6;
    }
  }

  repeated Parameter Parameters = 1;
}

/*
 * Each request message
 */

/* For connect request sent on the common wire of sql service. */
message RequestConnect {
}

/* For begin request. */
message RequestBegin {
  bool read_only = 1;
}

/* For prepare request. */
message RequestPrepare {
  string sql = 1;
  PlaceHolder host_valiables = 2;
}

/* For execute statement request. */
message RequestExecuteStatement {
  Transaction transaction_handle = 1;
  string sql = 2;
}

/* For execute query request. */
message RequestExecuteQuery {
  Transaction transaction_handle = 1;
  string sql = 2;
}

/* For execute prepared statement request. */
message RequestExecutePreparedStatement {
  Transaction transaction_handle = 1;
  PreparedStatement prepared_statement_handle = 2;
  ParameterSet parameters = 3;
}

/* For execute prepared query request. */
message RequestExecutePreparedQuery {
  Transaction transaction_handle = 1;
  PreparedStatement prepared_statement_handle = 2;
  ParameterSet parameters = 3;
}

/* For commit request. */
message RequestCommit {
  Transaction transaction_handle = 1;
}

/* For rollback request. */
message RequestRollback {
  Transaction transaction_handle = 1;
}

/* For request message to the SQL service. */
message Request {
  Session session_handle = 1;
  oneof request {
    RequestPrepare prepare = 2;
    RequestExecuteStatement execute_statement = 3;
    RequestExecuteQuery execute_query = 4;
    RequestExecutePreparedStatement execute_prepared_statement = 5;
    RequestExecutePreparedQuery execute_prepared_query = 6;
    RequestBegin begin = 7;
    RequestCommit commit = 8;
    RequestRollback rollback = 9;
  }
}



/*
 * Definition of sub fields for Response.
 */

/* For response of success when there is no data to return. */
message Success {
}

/* For response of error containing a error message. */
message Error {
  string detail = 1;
}


/*
 * Each response message
 */

/* For response to Connect sent back on the common wire of sql service. */
message ResponseConnect {
  oneof result {
    Session session_handle = 1;
    Error error = 2;
  }
}

/* For response to ExecuteStatement, ExecutePreparedStatement, Commit, and/or Rollback. */
message ResponseResultOnly {
  oneof result {
    Success success = 1;
    Error error = 2;
  }
}

/* For response to Begin. */
message ResponseBegin {
  oneof result {
    Transaction transaction_handle = 1;
    Error error = 2;
  }
}

/* For response to Prepare. */
message ResponsePrepare {
  oneof result {
    PreparedStatement prepared_statement_handle = 1;
    Error error = 2;
  }
}

/* For response to ExecuteQuery and/or ExecutePreparedQuery. */
message ResponseExecuteQuery {
  oneof result {
    string name = 1;  /* The name of the channel to which the ResultSet set will be sent. */
    Error error = 2;
  }
}


/* For response message from the SQL service. */
message Response {
  oneof response {
    ResponseResultOnly result_only = 1;
    ResponseBegin begin = 2;
    ResponsePrepare prepare = 3;
    ResponseExecuteQuery execute_query = 4;
  }
}



/*
 * Used in ResultSet connections.
 */

/* For record meta message sent back at the beginning of the result set. */
message ProtoRecordMeta {
  message Column {
    string name = 1;
    DataType type = 2;
    bool nullable = 3;
  }

  repeated Column Columns = 1;
}
