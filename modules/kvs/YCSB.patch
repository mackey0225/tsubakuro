diff --git a/.gitignore b/.gitignore
index aa65bac..2bc67a2 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,3 +23,6 @@
 # ignore standard Mac OS X files/dirs
 .DS_Store
 /differentbin/
+
+/bin/
+/build/
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..1ec30d3
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,18 @@
+TSUBAKURO_HOME := /work/ohkubo/git/tsubakuro
+YCSB_HOME := /work/ohkubo/git/YCSB
+YCSB_TSURUGIDB_LIB := $(YCSB_HOME)/tsurugidb-binding/lib
+
+update:
+	cp -puv $(TSUBAKURO_HOME)/modules/common/build/libs/tsubakuro-common-0.0.1-SNAPSHOT.jar $(YCSB_TSURUGIDB_LIB)
+	cp -puv $(TSUBAKURO_HOME)/modules/ipc/build/libs/tsubakuro-ipc-0.0.1-SNAPSHOT.jar $(YCSB_TSURUGIDB_LIB)
+	cp -puv $(TSUBAKURO_HOME)/modules/kvs/build/libs/tsubakuro-kvs-0.0.1-SNAPSHOT.jar $(YCSB_TSURUGIDB_LIB)
+	cp -puv $(TSUBAKURO_HOME)/modules/proto/build/libs/tsubakuro-proto-0.0.1-SNAPSHOT.jar $(YCSB_TSURUGIDB_LIB)
+	cp -puv $(TSUBAKURO_HOME)/modules/session/build/libs/tsubakuro-session-0.0.1-SNAPSHOT.jar $(YCSB_TSURUGIDB_LIB)
+	cp -puv $(TSUBAKURO_HOME)/modules/stream/build/libs/tsubakuro-stream-0.0.1-SNAPSHOT.jar $(YCSB_TSURUGIDB_LIB)
+
+cleanlib:
+	rm -rf $(YCSB_TSURUGIDB_LIB)/tsubakuro-*jar
+
+ycsb-tsurugi.zip: update
+	rm -f ycsb-tsurugidb.zip
+	zip -r ycsb-tsurugidb.zip tsurugidb-binding/ workloads/ build/site/ycsb/db/tsurugidb
\ No newline at end of file
diff --git a/bin/bindings.properties b/bin/bindings.properties
index 5c767c7..322f8b8 100755
--- a/bin/bindings.properties
+++ b/bin/bindings.properties
@@ -72,5 +72,6 @@
 solr7:site.ycsb.db.solr7.SolrClient
 tarantool:site.ycsb.db.TarantoolClient
 tablestore:site.ycsb.db.tablestore.TableStoreClient
+tsurugidb:site.ycsb.db.tablestore.TsurugidbClient
 voltdb:site.ycsb.db.voltdb.VoltClient4
 zookeeper:site.ycsb.db.zookeeper.ZKClient
\ No newline at end of file
diff --git a/core/src/main/java/site/ycsb/CommandLine.java b/core/src/main/java/site/ycsb/CommandLine.java
index c215058..015c911 100644
--- a/core/src/main/java/site/ycsb/CommandLine.java
+++ b/core/src/main/java/site/ycsb/CommandLine.java
@@ -155,6 +155,12 @@
 
       System.out.println((System.currentTimeMillis() - st) + " ms");
     }
+    try {
+      db.cleanup();
+    } catch (DBException e) {
+      e.printStackTrace();
+      System.exit(0);
+    }
   }
 
   private static void parseArguments(String[] args, Properties props, Properties fileprops) {
diff --git a/tsurugidb-binding/lib/jackson-annotations-2.13.3.jar b/tsurugidb-binding/lib/jackson-annotations-2.13.3.jar
new file mode 100644
index 0000000..60a3ddb
--- /dev/null
+++ b/tsurugidb-binding/lib/jackson-annotations-2.13.3.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/jackson-core-2.13.3.jar b/tsurugidb-binding/lib/jackson-core-2.13.3.jar
new file mode 100644
index 0000000..7e2086d
--- /dev/null
+++ b/tsurugidb-binding/lib/jackson-core-2.13.3.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/jackson-databind-2.13.3.jar b/tsurugidb-binding/lib/jackson-databind-2.13.3.jar
new file mode 100644
index 0000000..a27e9d7
--- /dev/null
+++ b/tsurugidb-binding/lib/jackson-databind-2.13.3.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/java-jwt-3.19.2.jar b/tsurugidb-binding/lib/java-jwt-3.19.2.jar
new file mode 100644
index 0000000..8c81e59
--- /dev/null
+++ b/tsurugidb-binding/lib/java-jwt-3.19.2.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/jsr305-3.0.2.jar b/tsurugidb-binding/lib/jsr305-3.0.2.jar
new file mode 100644
index 0000000..59222d9
--- /dev/null
+++ b/tsurugidb-binding/lib/jsr305-3.0.2.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/protobuf-java-3.17.3.jar b/tsurugidb-binding/lib/protobuf-java-3.17.3.jar
new file mode 100644
index 0000000..6453288
--- /dev/null
+++ b/tsurugidb-binding/lib/protobuf-java-3.17.3.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/site/ycsb/db/tsurugidb/TsurugidbClient.class b/tsurugidb-binding/lib/site/ycsb/db/tsurugidb/TsurugidbClient.class
new file mode 100644
index 0000000..a7142ec
--- /dev/null
+++ b/tsurugidb-binding/lib/site/ycsb/db/tsurugidb/TsurugidbClient.class
Binary files differ
diff --git a/tsurugidb-binding/lib/slf4j-api-1.7.36.jar b/tsurugidb-binding/lib/slf4j-api-1.7.36.jar
new file mode 100644
index 0000000..7d3ce68
--- /dev/null
+++ b/tsurugidb-binding/lib/slf4j-api-1.7.36.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/tsubakuro-common-0.0.1-SNAPSHOT.jar b/tsurugidb-binding/lib/tsubakuro-common-0.0.1-SNAPSHOT.jar
new file mode 100644
index 0000000..01d5325
--- /dev/null
+++ b/tsurugidb-binding/lib/tsubakuro-common-0.0.1-SNAPSHOT.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/tsubakuro-ipc-0.0.1-SNAPSHOT.jar b/tsurugidb-binding/lib/tsubakuro-ipc-0.0.1-SNAPSHOT.jar
new file mode 100644
index 0000000..7ce478b
--- /dev/null
+++ b/tsurugidb-binding/lib/tsubakuro-ipc-0.0.1-SNAPSHOT.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/tsubakuro-kvs-0.0.1-SNAPSHOT.jar b/tsurugidb-binding/lib/tsubakuro-kvs-0.0.1-SNAPSHOT.jar
new file mode 100644
index 0000000..923864e
--- /dev/null
+++ b/tsurugidb-binding/lib/tsubakuro-kvs-0.0.1-SNAPSHOT.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/tsubakuro-proto-0.0.1-SNAPSHOT.jar b/tsurugidb-binding/lib/tsubakuro-proto-0.0.1-SNAPSHOT.jar
new file mode 100644
index 0000000..8acd71c
--- /dev/null
+++ b/tsurugidb-binding/lib/tsubakuro-proto-0.0.1-SNAPSHOT.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/tsubakuro-session-0.0.1-SNAPSHOT.jar b/tsurugidb-binding/lib/tsubakuro-session-0.0.1-SNAPSHOT.jar
new file mode 100644
index 0000000..3e05dc8
--- /dev/null
+++ b/tsurugidb-binding/lib/tsubakuro-session-0.0.1-SNAPSHOT.jar
Binary files differ
diff --git a/tsurugidb-binding/lib/tsubakuro-stream-0.0.1-SNAPSHOT.jar b/tsurugidb-binding/lib/tsubakuro-stream-0.0.1-SNAPSHOT.jar
new file mode 100644
index 0000000..ad68bcd
--- /dev/null
+++ b/tsurugidb-binding/lib/tsubakuro-stream-0.0.1-SNAPSHOT.jar
Binary files differ
diff --git a/tsurugidb/src/main/java/site/ycsb/db/tsurugidb/TsurugidbClient.java b/tsurugidb/src/main/java/site/ycsb/db/tsurugidb/TsurugidbClient.java
new file mode 100644
index 0000000..60d03e9
--- /dev/null
+++ b/tsurugidb/src/main/java/site/ycsb/db/tsurugidb/TsurugidbClient.java
@@ -0,0 +1,181 @@
+package site.ycsb.db.tsurugidb;
+
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.Vector;
+
+import com.tsurugidb.tsubakuro.channel.common.connection.Credential;
+import com.tsurugidb.tsubakuro.channel.common.connection.NullCredential;
+import com.tsurugidb.tsubakuro.common.Session;
+import com.tsurugidb.tsubakuro.common.SessionBuilder;
+import com.tsurugidb.tsubakuro.kvs.GetResult;
+import com.tsurugidb.tsubakuro.kvs.KvsClient;
+import com.tsurugidb.tsubakuro.kvs.KvsServiceException;
+import com.tsurugidb.tsubakuro.kvs.PutType;
+import com.tsurugidb.tsubakuro.kvs.RecordBuffer;
+import com.tsurugidb.tsubakuro.kvs.bench.RecordBuilder;
+
+import site.ycsb.ByteIterator;
+import site.ycsb.DB;
+import site.ycsb.DBException;
+import site.ycsb.Status;
+import site.ycsb.StringByteIterator;
+
+/**
+ * Tsurugidb client for YCSB
+ */
+public class TsurugidbClient extends DB {
+
+    private final URI endpoint = URI.create("ipc:tsurugi");
+    private final Credential credential = NullCredential.INSTANCE;
+
+    private static final String KEY_NAME = RecordBuilder.FIRST_KEY_NAME;
+
+    private Session session;
+    private KvsClient client;
+
+    /**
+     * Initialize any state for this DB. Called once per DB instance; there is one
+     * DB instance per client thread.
+     */
+    @Override
+    public void init() throws DBException {
+        try {
+            this.session = SessionBuilder.connect(endpoint).withCredential(credential).create();
+            this.client = KvsClient.attach(session);
+            System.err.println("TsurugidbClient ready: " + endpoint.toString());
+        } catch (Exception e) {
+            throw new DBException(e);
+        }
+    }
+
+    /**
+     * Cleanup any state for this DB. Called once per DB instance; there is one DB
+     * instance per client thread.
+     */
+    @Override
+    public void cleanup() throws DBException {
+        try {
+            if (client != null) {
+                // NOTE session is also closes internally
+                client.close();
+                client = null;
+                session = null;
+            }
+        } catch (Exception e) {
+            throw new DBException(e);
+        }
+    }
+
+    private static RecordBuffer makeRecord(String key, Map<String, ByteIterator> values) {
+        RecordBuffer record = new RecordBuffer();
+        record.add(KEY_NAME, key);
+        for (var e : values.entrySet()) {
+            record.add(e.getKey(), e.getValue().toString());
+        }
+        return record;
+    }
+
+    private static Status convert(Exception e) {
+        if (e instanceof KvsServiceException) {
+            KvsServiceException ex = (KvsServiceException)e;
+            System.err.println(ex.getDiagnosticCode().name() + " " + ex.getMessage());
+            return new Status("ERROR", ex.getDiagnosticCode().name());
+        } else {
+            System.err.println(e.getMessage());
+            return new Status("ERROR", e.getMessage());
+        }
+    }
+
+    private Status put(String table, String key, Map<String, ByteIterator> values, PutType opt) {
+        var record = makeRecord(key, values);
+        int size = -1;
+        try (var tx = client.beginTransaction().await()) {
+            try {
+                size = client.put(tx, table, record, opt).await().size();
+                client.commit(tx).await();
+            } catch (Exception e) {
+                e.printStackTrace();
+                if (size < 0) {
+                    try {
+                        client.rollback(tx).await();
+                    } catch (Exception e2) {
+                        e2.printStackTrace();
+                    }
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        // System.err.println("put:size=" + size + ", opt=" + opt.name());
+        if (size == 1) {
+            return Status.OK;
+        } else {
+            return Status.NOT_FOUND;
+        }
+    }
+
+    @Override
+    public Status insert(String table, String key, Map<String, ByteIterator> values) {
+        return put(table, key, values, PutType.OVERWRITE);
+    }
+
+    @Override
+    public Status update(String table, String key, Map<String, ByteIterator> values) {
+        return put(table, key, values, PutType.IF_PRESENT);
+    }
+
+    @Override
+    public Status delete(String table, String key) {
+        RecordBuffer primKey = new RecordBuffer();
+        primKey.add(KEY_NAME, key);
+        try (var tx = client.beginTransaction().await()) {
+            client.remove(tx, table, primKey).await();
+            client.commit(tx).await();
+        } catch (Exception e) {
+            return convert(e);
+        }
+        return Status.OK;
+    }
+
+    @Override
+    public Status read(String table, String key, Set<String> fields, Map<String, ByteIterator> result) {
+        RecordBuffer primKey = new RecordBuffer();
+        primKey.add(KEY_NAME, key);
+        GetResult getResult;
+        try (var tx = client.beginTransaction().await()) {
+            getResult = client.get(tx, table, primKey).await();
+            client.commit(tx).await();
+        } catch (Exception e) {
+            return convert(e);
+        }
+        if (getResult.size() != 1) {
+            return new Status("ERROR", "GetResult has " + getResult.size() + " records, should be 1");
+        }
+        var record = getResult.asRecord();
+        if (fields == null) {
+            for (var i = 0; i < record.size(); i++) {
+                String name = record.getName(i);
+                if (name.equals(KEY_NAME)) {
+                    continue;
+                }
+                result.put(name, new StringByteIterator(record.getValue(i).toString()));
+            }
+        } else {
+            for (var field : fields) {
+                var value = record.getCharacter(field);
+                result.put(field, new StringByteIterator(value));
+            }
+        }
+        return Status.OK;
+    }
+
+    @Override
+    public Status scan(String table, String startkey, int recordcount, Set<String> fields,
+            Vector<HashMap<String, ByteIterator>> result) {
+        return Status.NOT_IMPLEMENTED;
+    }
+
+}
diff --git a/ycsb-tsurugidb.sh b/ycsb-tsurugidb.sh
new file mode 100644
index 0000000..34d2dc5
--- /dev/null
+++ b/ycsb-tsurugidb.sh
@@ -0,0 +1,61 @@
+#!/bin/sh
+
+YCSB_HOME=/work/ohkubo/git/YCSB
+YCSB_DIST=/work/ohkubo/z/ycsb-0.17.0
+TSUBAKURO_HOME=/work/ohkubo/git/tsubakuro
+
+# CLASSPATH=$YCSB_HOME/build:$YCSB_DIST/conf
+# CLASSPATH=$CLASSPATH:$YCSB_HOME/core/target/core-0.18.0-SNAPSHOT.jar
+
+CLASSPATH=$YCSB_DIST/conf
+for f in "$YCSB_DIST"/lib/*.jar ; do
+	if [ -r "$f" ] ; then
+		CLASSPATH="$CLASSPATH:$f"
+	fi
+done
+
+for f in "$YCSB_HOME"/tsurugidb-binding/lib/*.jar ; do
+	if [ -r "$f" ] ; then
+		CLASSPATH="$CLASSPATH:$f"
+	fi
+done
+
+CLASSPATH=$CLASSPATH:$YCSB_HOME/build
+
+TSUBAKURO_SO=$TSUBAKURO_HOME/modules/ipc/build/native/libtsubakuro.so
+TSURUGI_JNI_OPTS="-Dcom.tsurugidb.tsubakuro.jnilib="$TSUBAKURO_SO" --add-opens=java.base/java.nio=ALL-UNNAMED"
+JVM_OPTS=$TSURUGI_JNI_OPTS" -Xmx1024M"
+
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.CommandLine -db site.ycsb.BasicDB $@
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.CommandLine -db site.ycsb.db.tsurugidb.TsurugidbClient $@
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.BasicDB -P workloads/workloada
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloada
+# java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloada -p recordcount=100000
+
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloada
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloada
+
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadb
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadb
+
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadc
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadc
+
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadd
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadd
+
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloade
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloade
+
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadf
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadf
+
+
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadc -p recordcount=100
+#java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadc -p recordcount=100
+
+java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadc -p recordcount=1000
+java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadc -p recordcount=1000 -p operationcount=1000 
+
+java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -load -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadd -p recordcount=1000
+java $JVM_OPTS -classpath $CLASSPATH site.ycsb.Client -t -db site.ycsb.db.tsurugidb.TsurugidbClient -P workloads/workloadd -p recordcount=1000 -p operationcount=1000
