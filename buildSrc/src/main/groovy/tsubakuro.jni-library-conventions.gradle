plugins {
    id 'tsubakuro.java-conventions'
}

def nativeRootDir = "$project.projectDir/src/main/native"
def nativeBuildDir = "$project.buildDir/cmake/main"
def nativeIncludeDir = "${nativeRootDir}/include"

def nativeTestRootDir = "$project.projectDir/src/test/native"
def nativeTestBuildDir = "$project.buildDir/cmake/test"
def nativeTestIncludeDir = "${nativeTestRootDir}/include"

def nativeLibDir = "$project.buildDir/native"
def nativeLibVersion = System.getenv("GITHUB_SHA") ?: ""

task cmakeConfigure {
    inputs.files(fileTree(nativeRootDir) {
        exclude 'build/**'
    })
    .ignoreEmptyDirectories()
    .withPropertyName('nativeRootDir')

    outputs.dir(nativeBuildDir)
    .withPropertyName('nativeBuildDir')

    doLast {
        exec {
            mkdir "$nativeBuildDir"
            workingDir "$nativeBuildDir"
            commandLine [
                "cmake",
                "$nativeRootDir",
                "-DCMAKE_BUILD_TYPE=${System.getProperty('CMAKE_BUILD_TYPE', 'RelWithDebInfo')}",
                "-DCMAKE_INSTALL_PREFIX=$project.buildDir",
                "-DTSUBAKURO_LIBRARY_VERSION=$nativeLibVersion",
            ]
        }
    }
}

task cmakeTestConfigure {
    inputs.files(fileTree(nativeTestRootDir) {
        exclude 'build/**'
    })
    .ignoreEmptyDirectories()
    .withPropertyName('nativeTestRootDir')

    outputs.dir(nativeTestBuildDir)
    .withPropertyName('nativeTestBuildDir')

    doLast {
        exec {
            mkdir "$nativeTestBuildDir"
            workingDir "$nativeTestBuildDir"
            commandLine "cmake", "$nativeTestRootDir"
        }
    }
}

task cmakeBuild {
    inputs.files(fileTree(nativeRootDir) {
        exclude 'build/**'
    })
    .ignoreEmptyDirectories()
    .withPropertyName('nativeRootDir')

    outputs.dir(nativeBuildDir)
    .withPropertyName('nativeBuildDir')

    doLast {
        exec {
            mkdir "$nativeBuildDir"
            workingDir "$nativeBuildDir"
            commandLine "cmake", "--build", ".", "--", "-j"
        }
    }
}

task nativeLib {
    inputs.files(nativeBuildDir)
    .withPropertyName('nativeBuildDir')

    outputs.file("${nativeLibDir}/*.so")
    .withPropertyName('nativeLibFile')

    doLast {
        exec {
            mkdir "$nativeBuildDir"
            workingDir "$nativeBuildDir"
            commandLine "cmake", "--install", "."
        }
    }
}


task cmakeTestBuild {
    inputs.files(fileTree(nativeTestRootDir) {
        exclude 'build/**'
    })
    .ignoreEmptyDirectories()
    .withPropertyName('nativeTestRootDir')

    outputs.dir(nativeTestBuildDir)
    .withPropertyName('nativeTestBuildDir')

    doLast {
        exec {
            mkdir "$nativeTestBuildDir"
            workingDir "$nativeTestBuildDir"
            commandLine "cmake", "--build", ".", "--", "-j"
        }
    }
}

assemble.dependsOn nativeLib
test.dependsOn cmakeBuild
test.dependsOn cmakeTestBuild

cmakeConfigure.dependsOn compileJava
cmakeTestConfigure.dependsOn compileTestJava

cmakeBuild.dependsOn cmakeConfigure
cmakeTestBuild.dependsOn cmakeTestConfigure

nativeLib.dependsOn cmakeBuild

clean {
    delete += "$nativeBuildDir"
}
cleanTest {
    delete += "$nativeTestBuildDir"
}

compileJava {
    options.headerOutputDirectory = file("${nativeIncludeDir}")
}
compileTestJava {
    options.headerOutputDirectory = file("${nativeTestIncludeDir}")
}

tasks.named('test') {
    systemProperty 'java.library.path', "${nativeBuildDir}/src:${nativeTestBuildDir}/src"
}
