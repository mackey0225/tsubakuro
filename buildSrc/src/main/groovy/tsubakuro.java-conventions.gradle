plugins {
    id 'java'
    id 'checkstyle'

    id 'com.github.spotbugs'
}

group = 'com.tsurugidb.tsubakuro'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withSourcesJar()
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.7.1'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

checkstyle {
    configFile = rootProject.file('buildSrc/src/main/resources/checkstyle.xml')
    if ('strict' == findProperty('checkMode')) {
        maxWarnings = 0
    }
}

spotbugsMain {
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
}

spotbugsTest.enabled = false
checkstyleTest.enabled = false

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

task testsJar(type: Jar) {
    classifier 'tests'
    from sourceSets.test.output
}

jar {
    manifest.attributes (
        'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
        'Build-Revision' : System.getenv("GITHUB_SHA") ?: "",
        'Created-By'     : "Gradle ${gradle.gradleVersion}",
        'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
        'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
}

task writeVersion(type: WriteProperties) {
    description 'generate version file to META-INF/tsurugidb/{project.name}.properties'
    inputs.property('Build-Revision', System.getenv("GITHUB_SHA") ?: "")
    outputs.dir("${project.buildDir}/generated/version")
    outputFile "${project.buildDir}/generated/version/META-INF/tsurugidb/${project.name}.properties"
    properties (
        'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
        'Build-Revision' : System.getenv("GITHUB_SHA") ?: "",
        'Created-By'     : "Gradle ${gradle.gradleVersion}",
        'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
        'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
}
sourceSets.main.output.dir(writeVersion)

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        showStandardStreams true
        events 'started', 'skipped', 'passed', 'failed'
        exceptionFormat 'full'
    }
}
